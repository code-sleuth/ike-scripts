# Copyright 2024 Ibrahim Mbaziira
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
name: CI

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"

  pull_request_target:
    types: [opened, reopened, synchronize]
    branches-ignore:
      - deploy
      - main

  push:
    branches:
      - main

env:
  STAGE: dev
  REPOSITORY: ike-scripts
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  SQLX_OFFLINE: true

jobs:
  build:
    environment: dev
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write
    name: Build
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Rust
        run: |
          rustup set profile minimal
          rustup toolchain install 1.81.0 -c rust-docs
          rustup default 1.81.0

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            .cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Verify License Headers
        run: make verify-license-headers

      - name: Build
        run: make build
        env:
          DATABASE_URL: postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      - name: Test
        run: make test

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ibrahimmbaziira/ike-scripts

      - name: Build & Push Docker Image
        run: make docker-buildx-linux
        # uses: docker/bake-action@v5
        # with:
        #   push: true
        #   files: |
        #     compose.yml
        #     compose.override.yml
        #   set: |
        #     *.cache-from=type=gha
        #     *.cache-to=type=gha,mode=max
        #     *.attest=type=provenance
        #     *.attest=type=sbom

      - name: Generate Subject
        run: |
          docker pull ibrahimmbaziira/ike-scripts:latest

          REPO_DIGESTS=$(docker inspect --format='{{index .RepoDigests 0}}' ibrahimmbaziira/ike-scripts:latest)

          if [ "$REPO_DIGESTS" == "[]" ] || [ -z "$REPO_DIGESTS" ]; then
            echo "Error: RepoDigests is empty. The image may not have been pushed correctly."
            exit 1
          fi

          # Extract the first digest
          IMAGE_DIGEST=$(echo $REPO_DIGESTS | jq -r '.[0]' | cut -d'@' -f2)

          # Check if IMAGE_DIGEST is empty
          if [ -z "$IMAGE_DIGEST" ]; then
            echo "Error: Unable to extract image digest."
            exit 1
          fi

          echo '{
            "name": "ibrahimmbaziira/ike-scripts",
            "digest": {
              "sha256": "'$IMAGE_DIGEST'"
            }
          }' > subject.json

      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: subject.json
          provenance-path: provenance.json
          # subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
